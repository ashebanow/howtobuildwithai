#!/bin/bash

# Check if issue argument is provided
if [ $# -eq 0 ]; then
	echo "Usage: work-on-github-issue <issue-number-or-url>"
	echo "Examples:"
	echo "  work-on-github-issue 123"
	echo "  work-on-github-issue https://github.com/owner/repo/issues/123"
	exit 2
fi

ISSUE_ARG="$1"

# Extract issue number if URL is provided
if [[ "$ISSUE_ARG" == *"github.com"* ]]; then
	ISSUE_NUMBER=$(echo "$ISSUE_ARG" | grep -oE '[0-9]+$')
else
	ISSUE_NUMBER="$ISSUE_ARG"
fi

# Get repository info
REPO_INFO=$(gh repo view --json owner,name 2>/dev/null)
if [ $? -ne 0 ]; then
	echo "Error: Not in a GitHub repository or gh CLI not authenticated"
	exit 1
fi

OWNER=$(echo "$REPO_INFO" | jq -r '.owner.login')
REPO_NAME=$(echo "$REPO_INFO" | jq -r '.name')

# GraphQL query for Issue and comments
read -r -d '' QUERY <<'EOF'
query($owner: String!, $repo: String!, $number: Int!) {
  repository(owner: $owner, name: $repo) {
    issue(number: $number) {
      title
      number
      body
      url
      state
      createdAt
      author { login }
      assignees(first: 10) { nodes { login } }
      labels(first: 50) { nodes { name } }
      comments(first: 100) {
        nodes {
          author { login }
          body
          createdAt
        }
      }
    }
  }
}
EOF

# Execute query
RESPONSE=$(gh api graphql -f query="$QUERY" -F owner="$OWNER" -F repo="$REPO_NAME" -F number="$ISSUE_NUMBER" 2>/dev/null)

if [ $? -ne 0 ]; then
	echo "Error: Could not fetch issue #$ISSUE_NUMBER"
	exit 1
fi

# Extract data
ISSUE_DATA=$(echo "$RESPONSE" | jq -r '.data.repository.issue')
if [ "$ISSUE_DATA" == "null" ]; then
	echo "Error: Issue #$ISSUE_NUMBER not found"
	exit 1
fi

TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
STATE=$(echo "$ISSUE_DATA" | jq -r '.state')
AUTHOR=$(echo "$ISSUE_DATA" | jq -r '.author.login')
BODY=$(echo "$ISSUE_DATA" | jq -r '.body // ""')
URL=$(echo "$ISSUE_DATA" | jq -r '.url')
CREATED_AT=$(echo "$ISSUE_DATA" | jq -r '.createdAt | split("T")[0]')
ASSIGNEES=$(echo "$ISSUE_DATA" | jq -r '.assignees.nodes | map(.login) | join(", ")')
LABELS=$(echo "$ISSUE_DATA" | jq -r '.labels.nodes | map(.name) | join(", ")')

# Output formatted content
cat <<EOF
Deep-dive on this GitHub issue, explore the codebase, and propose a comprehensive plan.

# $TITLE (#$ISSUE_NUMBER)
**State:** $STATE
**Author:** $AUTHOR
**Assignees:** ${ASSIGNEES:-None}
**Labels:** ${LABELS:-None}
**Created:** $CREATED_AT
**URL:** $URL

## Description
$BODY

EOF

# Add comments if present
COMMENTS=$(echo "$ISSUE_DATA" | jq -r '.comments.nodes[] | "**@\(.author.login)** (\(.createdAt | split(\"T\")[0])):\n\(.body)\n"')
if [ -n "$COMMENTS" ]; then
	echo "## Comments"
	echo
	echo "$COMMENTS"
fi

cat <<'EOF'

Onboard yourself to the current task:
• Use ultrathink.
• Explore the codebase.
• Ask questions if needed.

Goal: Be fully prepared to start working on the task.

Take as long as you need to prepare. Over-preparation is better than under-preparation.

## Your Tasks

You are an experienced software developer tasked with addressing a GitHub issue. Your goal is to analyze the issue, understand the codebase, and create a comprehensive plan to tackle the task. Follow these steps carefully:

1. First, review the above issue context and details. Use the oracle to do a root cause analysis.

2. Next, examine the relevant parts of the codebase.

Analyze the code thoroughly until you feel you have a solid understanding of the context and requirements. Analyze existing patterns in the codebase.
Also look for smells and potential issues that may arise during the implementation and might bite us. If we first have to refactor the codebase to make it easier to implement the feature or fix the bug, include it in the plan.

3. Create a comprehensive plan and todo list for addressing the issue. Consider the following aspects:
   - Required code changes
   - Potential impacts on other parts of the system
   - Necessary tests to be written or updated
   - Documentation updates
   - Performance considerations
   - Security implications
   - Backwards compatibility (if applicable)
   - Include the reference link to the source issue and any related discussions

4. Think deeply about all aspects of the task. Consider edge cases, potential challenges, and best practices for addressing the issue. Review the plan with the oracle and adjust it based on its feedback.
5. **ASK FOR EXPLICIT APPROVAL** before starting on the TODO list.

Remember, your task is to create a plan, not to implement the changes. Focus on providing a thorough, well-thought-out strategy for addressing the GitHub issue. Then ASK FOR APPROVAL BEFORE YOU START WORKING on the TODO LIST.

EOF
